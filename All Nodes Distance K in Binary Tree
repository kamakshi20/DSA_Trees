/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public Map<TreeNode, TreeNode> buildParentMap(TreeNode root){
        Map<TreeNode, TreeNode> parentmap = new HashMap<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);

        while(!q.isEmpty()){

            TreeNode curr = q.poll();

            if(curr.left != null){
                q.add(curr.left);
                parentmap.put(curr.left, curr);
            }

            if(curr.right != null){
                q.add(curr.right);
                parentmap.put(curr.right, curr);
            }
        } 
        return parentmap;
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {

        Map<TreeNode, TreeNode> parentmap = buildParentMap(root);
        Set<TreeNode> vis = new HashSet<>();
        Queue<TreeNode> q = new LinkedList<>();

        q.add(target);
        vis.add(target);
        int dis = 0;

        while(!q.isEmpty()){

            if(dis == k)    break;

            int levelsize = q.size();
            dis += 1;

            for(int i=0; i<levelsize; i++){
                TreeNode curr = q.poll();

                if(curr.left != null && !vis.contains(curr.left)){
                    q.add(curr.left);
                    vis.add(curr.left);
                }
                if(curr.right != null && !vis.contains(curr.right)){
                    q.add(curr.right);
                    vis.add(curr.right);
                }

                if(parentmap.get(curr) != null && !vis.contains(parentmap.get(curr))){
                    q.add(parentmap.get(curr));
                    vis.add(parentmap.get(curr));
                }
            }
        }

        List<Integer> list = new ArrayList<>();
        while(!q.isEmpty()){
            list.add(q.poll().val);
        }
        return list;
    }
}
